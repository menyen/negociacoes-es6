{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["ConnectionFactory","HttpService","NegociacaoDao","Negociacao","NegociacaoService","_http","negociacao","getConnection","then","conexao","dao","adiciona","catch","console","log","erro","Error","listaTodos","apagaTodos","get","negociacoes","map","Date","objeto","data","quantidade","valor","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","listaAtual","obterNegociacoes","filter","some","isEqual","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {ConnectionFactory} from './ConnectionFactory.js';\nimport {HttpService} from './HttpService.js';\nimport {NegociacaoDao} from '../dao/NegociacaoDao.js';\nimport {Negociacao} from '../models/Negociacao.js';\n\nexport class NegociacaoService {\n\n    constructor() {\n\n        this._http = new HttpService();\n    }\n\n    cadastra(negociacao) {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociacação cadastrada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível cadastrar a negociação');\n            });\n    }\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                throw new Error(erro);\n            })\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.apagaTodos())\n            .catch(erro => {\n                throw new Error(erro);\n            })\n    }\n\n    obterNegociacoesDaSemana() {\n\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana anterior');\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\n            });\n\n    }\n\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEqual(negociacaoExistente)\n                    )))\n    }\n}\n"]}